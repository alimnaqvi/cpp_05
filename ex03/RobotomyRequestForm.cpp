#include "RobotomyRequestForm.h"

/* Orthodox canonical form requirements */

RobotomyRequestForm::RobotomyRequestForm() : RobotomyRequestForm( "defaultTarget" ) {}

RobotomyRequestForm::RobotomyRequestForm( const RobotomyRequestForm& other )
    : AForm( other ), mTarget{ other.mTarget } {}

RobotomyRequestForm& RobotomyRequestForm::operator=( const RobotomyRequestForm& other ) {
    if ( this != &other ) {
        AForm::operator=( other );
        mTarget = other.mTarget;
    }

    return *this;
}

RobotomyRequestForm::~RobotomyRequestForm() {}

/* Main parameterized constructor */

RobotomyRequestForm::RobotomyRequestForm( std::string_view target )
    : AForm{ "Robotomy Request Form", "robotomy request", 72, 45 }, mTarget{ target } {}

/* Getter */

const std::string& RobotomyRequestForm::getTarget() const {
    return mTarget;
}

/* Return a clone of self */

AForm* RobotomyRequestForm::makeCopy() const {
    return new RobotomyRequestForm{ mTarget };
}

/* Return copy of self with specified target */

AForm* RobotomyRequestForm::makeCopy( std::string_view targetName ) const {
    return new RobotomyRequestForm{ targetName };
}

/* Execute this specific formâ€™s action on target */

void RobotomyRequestForm::specificExecute() const {
    std::cout << " * Loud drilling noises * " << '\n';

    // Seed our Mersenne Twister using a pseudo-random number generated by the OS
    std::mt19937 mt{ std::random_device{}() };

    // Create a reusable random number generator that generates uniform numbers between 1 and 100
    std::uniform_int_distribution random100{ 1, 100 };

    // Generate a random number between 1 and 100; Robotomy is successful when the number is greater than 50
    if ( random100( mt ) > 50 )
        std::cout << mTarget << " has been successfully robotomized." << '\n';
    else
        std::cout << "Robotomy failed on " << mTarget << ".\n";
}

/* Insertion operator overload */

std::ostream& operator<<( std::ostream& out, const RobotomyRequestForm& form ) {
    out << "Form name: " << form.getName() << ", Is signed: " << std::boolalpha << form.isSigned()
        << ", Minimum grade to sign: " << form.getGradeToSign()
        << ", Minimum grade to execute: " << form.getGradeToExecute() << ", Target: " << form.getTarget() << '.';

    return out;
}
